// 贪心算法 greedy


// 会议室分配

// 切金条
// 哈夫曼编码 Huffman coding
// 小根堆，每次弹出两个，合并成一个，然后再压入堆中。。。直到 堆中只有一个元素

// 项目和收益
// 花费 costs = [1, 1, 2,2,3,4]，利润 profits = [1,4,3,5,2,10] 最多k=4, 初始资金 m = 1
// 小根堆：costs 排序
// 大根堆：每次小根堆弹出一个，如果总资金大于等于cost，则将对应利润压入大根堆
// 贪心算法：每次选择利润最大的项目，如果总资金大于等于cost，则选择这个项目，否则选择下一个项目

// 背包问题

// 0-1 背包问题

// 数据流中，随时取得中位数
// 大根堆存小的部分，小根堆存大的部分
// 大根堆 cur <= peek ？ 大根堆 ： 小根堆
// 小根堆

export default function greedy() {
  // 贪心算法
  // 贪心算法是指在每一步选择中，都采取当前状态下最好或最优的选择，从而得到全局最好或最优的结果
  // 贪心算法不一定能得到全局最优解，但总能得到一个 locally optimal 的解
  // 贪心算法的优点是简单、容易理解、容易实现，缺点是可能存在局部最优解，不能得到全局最优解
  // 贪心算法的适用场景是解决一些最优化问题，比如求解最大流、最小割、最大匹配、最小费用最大流等
}